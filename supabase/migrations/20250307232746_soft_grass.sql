/*
  # Updated Schema Setup

  1. Changes
    - Modified `sales_metrics` table structure
    - Added insert policies for all tables
    - Added period and product_name columns

  2. Security
    - Added INSERT policies for authenticated users
*/

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Products table
CREATE TABLE IF NOT EXISTS products (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  sku text NOT NULL UNIQUE,
  price numeric(10,2) NOT NULL DEFAULT 0,
  stock integer NOT NULL DEFAULT 0,
  description text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE products ENABLE ROW LEVEL SECURITY;

DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'products' AND policyname = 'Allow authenticated users to read products'
  ) THEN
    CREATE POLICY "Allow authenticated users to read products"
      ON products
      FOR SELECT
      TO authenticated
      USING (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'products' AND policyname = 'Allow authenticated users to insert products'
  ) THEN
    CREATE POLICY "Allow authenticated users to insert products"
      ON products
      FOR INSERT
      TO authenticated
      WITH CHECK (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'products' AND policyname = 'Allow authenticated users to update products'
  ) THEN
    CREATE POLICY "Allow authenticated users to update products"
      ON products
      FOR UPDATE
      TO authenticated
      USING (true)
      WITH CHECK (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger
    WHERE tgname = 'update_products_updated_at'
  ) THEN
    CREATE TRIGGER update_products_updated_at
      BEFORE UPDATE ON products
      FOR EACH ROW
      EXECUTE FUNCTION update_updated_at_column();
  END IF;
END $$;

-- Product Stats table
CREATE TABLE IF NOT EXISTS product_stats (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  total_orders integer NOT NULL DEFAULT 0,
  synced_products integer NOT NULL DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE product_stats ENABLE ROW LEVEL SECURITY;

DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'product_stats' AND policyname = 'Allow authenticated users to read product stats'
  ) THEN
    CREATE POLICY "Allow authenticated users to read product stats"
      ON product_stats
      FOR SELECT
      TO authenticated
      USING (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'product_stats' AND policyname = 'Allow authenticated users to insert product stats'
  ) THEN
    CREATE POLICY "Allow authenticated users to insert product stats"
      ON product_stats
      FOR INSERT
      TO authenticated
      WITH CHECK (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger
    WHERE tgname = 'update_product_stats_updated_at'
  ) THEN
    CREATE TRIGGER update_product_stats_updated_at
      BEFORE UPDATE ON product_stats
      FOR EACH ROW
      EXECUTE FUNCTION update_updated_at_column();
  END IF;
END $$;

-- Drop and recreate Sales Metrics table with updated structure
DROP TABLE IF EXISTS sales_metrics;

CREATE TABLE sales_metrics (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  product_name text NOT NULL,
  sales_count integer NOT NULL DEFAULT 0,
  revenue numeric(10,2) NOT NULL DEFAULT 0,
  estimated_profit numeric(10,2) NOT NULL DEFAULT 0,
  period text NOT NULL,
  metric_type text NOT NULL CHECK (metric_type IN ('daily', 'weekly', 'monthly')),
  target numeric(10,2) NOT NULL DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE sales_metrics ENABLE ROW LEVEL SECURITY;

DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'sales_metrics' AND policyname = 'Allow authenticated users to read sales metrics'
  ) THEN
    CREATE POLICY "Allow authenticated users to read sales metrics"
      ON sales_metrics
      FOR SELECT
      TO authenticated
      USING (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'sales_metrics' AND policyname = 'Allow authenticated users to insert sales metrics'
  ) THEN
    CREATE POLICY "Allow authenticated users to insert sales metrics"
      ON sales_metrics
      FOR INSERT
      TO authenticated
      WITH CHECK (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger
    WHERE tgname = 'update_sales_metrics_updated_at'
  ) THEN
    CREATE TRIGGER update_sales_metrics_updated_at
      BEFORE UPDATE ON sales_metrics
      FOR EACH ROW
      EXECUTE FUNCTION update_updated_at_column();
  END IF;
END $$;

-- Insert initial data
INSERT INTO product_stats (total_orders, synced_products)
VALUES (150, 3000)
ON CONFLICT DO NOTHING;

-- Insert initial sales metrics data with new structure
INSERT INTO sales_metrics (
  product_name,
  sales_count,
  revenue,
  estimated_profit,
  period,
  metric_type,
  target
)
VALUES 
  ('Test Product', 10, 750, 250, '2025-03', 'daily', 1000),
  ('Test Product', 70, 5250, 1750, '2025-03', 'weekly', 7000),
  ('Test Product', 300, 22500, 7500, '2025-03', 'monthly', 30000)
ON CONFLICT DO NOTHING;