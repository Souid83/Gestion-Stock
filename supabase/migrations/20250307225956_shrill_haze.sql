/*
  # Create sales metrics tables

  1. New Tables
    - `sales_metrics`
      - `id` (integer, primary key)
      - `metric_type` (text) - daily, weekly, or monthly
      - `target` (numeric)
      - `revenue` (numeric)
      - `estimated_profit` (numeric)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    
    - `product_stats`
      - `id` (uuid, primary key)
      - `total_orders` (integer)
      - `synced_products` (integer)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

  2. Security
    - Enable RLS on both tables
    - Add policies for authenticated users to read data
*/

-- Create sales_metrics table
CREATE TABLE IF NOT EXISTS sales_metrics (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  metric_type text NOT NULL CHECK (metric_type IN ('daily', 'weekly', 'monthly')),
  target numeric(10,2) NOT NULL DEFAULT 0,
  revenue numeric(10,2) NOT NULL DEFAULT 0,
  estimated_profit numeric(10,2) NOT NULL DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create product_stats table
CREATE TABLE IF NOT EXISTS product_stats (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  total_orders integer NOT NULL DEFAULT 0,
  synced_products integer NOT NULL DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE sales_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE product_stats ENABLE ROW LEVEL SECURITY;

-- Safely create policies
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'sales_metrics' 
        AND policyname = 'Allow authenticated users to read sales metrics'
    ) THEN
        CREATE POLICY "Allow authenticated users to read sales metrics"
            ON sales_metrics
            FOR SELECT
            TO authenticated
            USING (true);
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'product_stats' 
        AND policyname = 'Allow authenticated users to read product stats'
    ) THEN
        CREATE POLICY "Allow authenticated users to read product stats"
            ON product_stats
            FOR SELECT
            TO authenticated
            USING (true);
    END IF;
END
$$;

-- Create updated_at trigger function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Safely create triggers
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_trigger 
        WHERE tgname = 'update_sales_metrics_updated_at'
    ) THEN
        CREATE TRIGGER update_sales_metrics_updated_at
            BEFORE UPDATE ON sales_metrics
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_trigger 
        WHERE tgname = 'update_product_stats_updated_at'
    ) THEN
        CREATE TRIGGER update_product_stats_updated_at
            BEFORE UPDATE ON product_stats
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;
END
$$;